name: "Merge Associated PR on Issue Completion (using gh CLI)"

on:
  issues:
    types: [closed]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  merge-associated-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine Associated PR Number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          BRANCH_NAME="submission/issue-${ISSUE_NUMBER}"
          PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --state open --json number --jq '.[0].number' || echo "")

          if [[ -n "$PR_NUMBER" ]]; then
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          else
            echo "No associated PR found for issue #$ISSUE_NUMBER"
          fi

      - name: Check if issue was closed as completed
        if: env.PR_NUMBER != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          STATE_REASON=$(gh issue view "$ISSUE_NUMBER" --json stateReason --jq '.stateReason')
          echo "Issue #$ISSUE_NUMBER was closed with reason: $STATE_REASON"

          if [[ "$STATE_REASON" == "COMPLETED" ]]; then
            echo "ISSUE_COMPLETED=true" >> $GITHUB_ENV
          else
            echo "ISSUE_COMPLETED=false" >> $GITHUB_ENV
          fi

      - name: Merge PR if issue was completed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.PR_NUMBER != '' && env.ISSUE_COMPLETED == 'true'
        run: |
          echo "Attempting to merge PR #$PR_NUMBER..."

          # Check if the PR is mergeable
          MERGEABLE=$(gh pr view "$PR_NUMBER" --json mergeable --jq '.mergeable')

          if [[ "$MERGEABLE" == "MERGEABLE" ]]; then
            echo "‚úÖ PR #$PR_NUMBER is mergeable. Proceeding with squash merge..."
            if gh pr merge "$PR_NUMBER" --squash --delete-branch; then
              echo "‚úÖ PR #$PR_NUMBER merged successfully."
            else
              echo "‚ùå Failed to merge PR #$PR_NUMBER."
              exit 1
            fi
          else
            echo "‚ö†Ô∏è PR #$PR_NUMBER has merge conflicts. Attempting auto-resolve..."

            # Set up Git
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"

            # Fetch the latest main branch
            git fetch origin main

            # Fetch the PR branch
            PR_BRANCH=$(gh pr view "$PR_NUMBER" --json headRefName --jq '.headRefName')
            git fetch origin "$PR_BRANCH"

            # Checkout the PR branch
            git checkout "$PR_BRANCH"

            # Rebase onto main to resolve conflicts
            git rebase origin/main

            # Check for conflicts in submissions.json
            if [[ -f "submissions.json" ]]; then
              echo "Resolving conflicts in submissions.json..."

              # Read `submissions.json` from both branches
              git checkout origin/main -- submissions.json
              mv submissions.json main_submissions.json

              git checkout "$PR_BRANCH" -- submissions.json
              mv submissions.json pr_submissions.json

              # Merge JSON contents using jq (ensuring unique entries based on repository_url)
              jq -s 'add | unique_by(.repository_url)' main_submissions.json pr_submissions.json > submissions.json

              # Commit the resolved file
              git add submissions.json
              git rebase --continue

              # Push the resolved PR branch
              git push --force-with-lease origin "$PR_BRANCH"

              # Attempt final merge
              if gh pr merge "$PR_NUMBER" --squash --delete-branch; then
                echo "‚úÖ PR #$PR_NUMBER merged successfully after resolving conflicts."
              else
                echo "‚ùå Failed to merge PR #$PR_NUMBER after resolving conflicts."
                exit 1
              fi
            else
              echo "‚ùå submissions.json not found. Cannot resolve conflicts."
              exit 1
            fi
          fi
          echo "Triggering clone-repos workflow..."
          gh workflow run clone-repos.yml

      - name: Close PR if issue was not completed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.PR_NUMBER != '' && env.ISSUE_COMPLETED == 'false'
        run: |
          echo "Issue was not completed. Closing PR #$PR_NUMBER without merging..."
          gh pr close "$PR_NUMBER" --delete-branch || echo "PR closing failed!"
          echo "PR #$PR_NUMBER has been closed."

      - name: Comment on Issue about PR action
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.PR_NUMBER != ''
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"

          if [[ "$ISSUE_COMPLETED" == "true" ]]; then
            if [[ -n "$(gh pr view "$PR_NUMBER" --json mergedAt --jq '.mergedAt')" ]]; then
              COMMENT_BODY="‚úÖ The associated PR #$PR_NUMBER has been merged because the issue was marked as completed."
            else
              COMMENT_BODY="‚ö†Ô∏è The associated PR #$PR_NUMBER could not be merged even though the issue was marked as completed."
            fi
          else
            COMMENT_BODY="üîí The associated PR #$PR_NUMBER has been closed without merging because the issue was not completed."
          fi
          gh issue comment "$ISSUE_NUMBER" --body "$COMMENT_BODY"
